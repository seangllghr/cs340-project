* Project Structure:
** controllers/
   - handle requests and call services
** db/
   - data access layer
** docs/
   - for the purposes of my course, assignment deliverables
** routes/
   - API routes and endpoints for Express
** services/
   - business logic between direct data access and controller
** tests/
*** controllers/
    - controller tests
*** db/
    - data access layer tests
*** services/
    - business logic tests
** [[file:server.js][server.js]]
    - server config and init
* Final Application Spec
** Document Manipulation
- These are command-line utilities for manipulating the application database
*** Insert
**** MUST read key-value pairs from stdin
**** MUST read key-value pairs from JSON file
**** Must create new document
*** Update
**** MUST accept input string 'Ticker'
**** MUST accept input number 'Volume'
***** MUST NOT accept 'Volume' update values lower than 1
**** MUST set 'Volume' to input 'Volume' in document matching input 'Ticker'
*** Delete
**** MUST accept input string 'Ticker'
**** MUST delete document matching input 'Ticker'
** Document Retrieval
- These are command-line utilities for retrieving data from the application db
*** Find
**** MUST accept two numeric inputs: 'Low' and 'High'
**** MUST match documents : 'Low' <= "50-Day Simple Moving Average" <= 'High'
**** MUST return count of matching documents
*** Aggregate
**** MUST accept string 'Sector'
**** MUST return total outstanding shares
**** MUST group shares by 'Industry'
** Advanced Programming Project
- This is a web service API that forms the basis of the application
- base URI: http://[hostname]/stocks/api/v1.0/
*** MUST provide RESTful API endpoints for the basic CRUD operations:
**** POST (Create) at /createStock/[ticker symbol]
- Content-Type: application/JSON
- Responses: 200 OK, 201 Created
**** GET (Read) at /getStock/[ticker symbol]
- Responses: 200 OK, 404 Not Found
**** PUT (Update) at /updateStock/[ticker symbol]
- Content-Type: application/JSON
- Responses: 200 OK, 404 Not Found
**** DELETE at /deleteStock/[ticker symbol]
- Responses: 200 OK, 404 Not Found
*** MUST provide RESTful API endpoints for advanced queries:
**** POST at /stockReport
- Content-Type: application/JSON
- Responses: 200 OK, 404 Not Found
***** MUST accept list of user-defined ticker symbols
***** MUST select stock summary information matching those ticker symbols
***** MUST display matching stock summary information
**** GET at /industryReport/[Industry]
- Responses: 200 OK, 404 Not Found
***** MUST accept user-defined industry string
***** MUST match a portfolio of top five stocks matching industry string
***** MUST display matching stock portfolio
**** GET at /portfolio/[company name]
- Responses: 200 OK, 404 Not Found
***** MUST accept user-defined company from companies.json
***** MUST match possible investments grouped by industry
***** MUST display the matching portfolio
* Tasks
  :properties:
  :cookie_data: recursive
  :end:
** Milestone Assignments [100%]
*** DONE npm init
   CLOSED: [2020-06-04 Thu 11:49]
*** DONE git init
   CLOSED: [2020-06-04 Thu 11:51]
   - [X] README
   - [X] .gitignore
*** DONE Data Access [4/4]
**** DONE Create
**** DONE Read
**** DONE Update
**** DONE Delete
*** DONE Services [4/4]
**** DONE Create
**** DONE Read
**** DONE Update
**** DONE Delete
*** DONE Controllers [4/4]
**** DONE Create
**** DONE Read
**** DONE Update
- [X] Pop `query` off req.query array and convert it into an object
- [X] Convert remaining req.query array into an object and create a Mongo $set
**** DONE Delete
*** DONE API Routes [4/4]
**** DONE Create
- HTTP POST with JSON document
**** DONE Read
- HTTP GET /api/read?<query_field>=<value>
**** DONE Update
- HTTP GET /api/Update?<query_field>=<value>&<update_field>=<update_value>
**** DONE Delete
- HTTP GET /api/delete?<query_field>=<value>
*** DONE Basic Service (Milestone 2 Prompt 1)
**** DONE Current Server Time (GET)
**** DONE Hello $var with GET
- GET request to /hello?name="<var>"
- Returns JSON: { hello: "<var>" }
**** DONE Return JSON from http POST
- Input: { string1: "<string1>", string2: "<string2>" }
- Output: { first: "<string1", second: "<string2>" }
*** DONE Tests [100%]
**** DONE Data Access [4/4]
***** DONE dataCreate
***** DONE dataRead
***** DONE dataUpdate
***** DONE dataDelete
**** DONE Services [4/4]
***** DONE createService
***** DONE readService
***** DONE updateService
***** DONE deleteService
** Final Application [100%]
*** DONE Features
**** DONE Command Line Utils
***** DONE Insert document from stream of key-value pairs
****** DONE Read input document from stdin
****** DONE Read input document from file
***** DONE Update numeric 'Value' matching input string 'Ticker'
****** DONE Read user input from stdin
****** DONE Read uers input from prompt
***** DONE Delete stock record matching input string 'Ticker'
****** DONE Read user input from stdin
****** DONE Read uers input from prompt
***** DONE Find documents with '50-Day SMA' in user-defined range
****** DONE Read user input from stdin
****** DONE Read user input from prompt
***** DONE Find ticker symbols for user-specified industry
****** DONE Read user input from stdin
****** DONE Read user input from prompt
***** DONE Aggregate report total outstanding shares by 'Industry'
****** DONE Read user input from stdin
****** DONE Read user input from prompt
**** DONE API
***** DONE Send POST request to add key-value pairs
****** DONE Process passed data into document object for DAL :Services:
****** DONE Extract POST body and pass to create service :Controllers:
****** DONE API route for POST /createStock request :Routes:
***** DONE Send GET request to read stock record
****** DONE Process passed data into params for DAL :Services:
****** DONE Extract GET query data and pass to read service :Controllers:
****** DONE API route for GET /readStock request :Routes:
***** DONE Send PUT request to update key-value pairs
****** DONE Process passed data into params for DAL :Services:
****** DONE Extract PUT body and pass to update service :Controllers:
****** DONE API route for PUT /updateStock request :Routes:
***** DONE Send DELETE request to delete stock record
****** DONE Process passed data into params for DAL :Services:
****** DONE Extract DELETE request data and pass to delete service :Controllers:
****** DONE API route for DELETE /deleteStock request :Routes:
***** DONE Send POST request to return stock report
****** DONE Process passed data into params for DAL :Services:
****** DONE Extract POST body and pass to stock report service :Controllers:
****** DONE API route for POST /stockReport request :Routes:
***** DONE Send GET request to return industry Report
****** DONE Process passed data into params for DAL :Services:
****** DONE Extract GET query and pass to industry report service :Controllers:
****** DONE API route for GET /industryReport request :Routes:
***** KILL Send GET request to return portfolio
While this feature is mentioned in the prompt summary, it does not appear in the
detailed specification or the project rubric. Thus, I've decided to omit it.
****** KILL Process passed data into params :Services:
****** KILL Extract GET query and pass to portfolio service :Controllers:
****** KILL API route for GET /portfolio request :Routes:
**** DONE Bash Client
***** DONE insert
***** DONE read
***** DONE update
***** DONE delete
***** DONE stock-report
***** DONE industry-report
***** KILL company-portfolio
*** DONE Indices
**** DONE Ticker Symbol [ascending] :simple:
**** DONE Industry [ascending] Analyst Recom [descending] :compound:
*** DONE Screenshots [19/19]
:properties:
:cookie_data: recursive
:end:
- [X] Collection Management:
  - [X] Use mongoimport to create db:market col:stocks from stocks.json
  - [X] Document creation of necessary single or compound indices
    - [X] simple index on `Ticker` [ascending]
    - [X] compound index on `Industry` [ascending] `Analyst Recom` [descending]
- [X] Document Manipulation:
  - [X] Document correct execution of Insert functionality
  - [X] Document correct execution of Update functionality
  - [X] Document correct execution of Delete functionality
- [X] Document Retrieval:
  - [X] Document correct execution of Find functionality
  - [X] Document correct execution of aggregation functionality
- [X] REST API
  - [X] Document correct execution of POST /createStock
  - [X] Document correct execution of GET /readStock
  - [X] Document correct execution of PUT /updateStock
  - [X] Document correct execution of DELETE /deleteStock
  - [X] Document correct execution of POST /stockReport
  - [X] Document correct execution of GET /industryReport
*** DONE Documentation
**** Database Administration
***** Initial Back End Setup
****** Database Creation and Import
****** Index Design and Implementation
***** Libraries
****** `cli-utils`
****** `jsonUtils`
***** Command Line Tools
****** Creating New Stock Records with `insert-stock`
****** Updating Existing Stock Records with `update-stock`
****** Deleting Existing Stock Records with `delete-stock`
****** `sma-spread`, a Demonstration of Complex Find Queries
****** Generating a List of Stock Ticker Symbols in a Given Industry
****** Generating a List of Outstanding Shares by Industry
**** Securities Data Reporting System Web Service API
***** Aside: `stock-client.sh`, a Rudimentary Bash SDRS Client
***** Basic CRUD Operations
****** Performing Create Operations
****** Performing Read Operations
****** Performing Update Operations
****** Performing Delete Operations
***** Advanced Reporting Features
****** Portfolio Reports
****** Industry Reports
